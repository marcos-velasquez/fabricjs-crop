import { ActiveObjectService } from './active-object.service';
import { FabricService } from './fabric.service';
import { Object, CanvasEvents, ImageProps, Canvas, Group } from 'fabric';
import { Image } from './objects/image/image';
export * from './utils';
export * from './objects';

export const fabricServiceInstance = new FabricService();
const activeObjectServiceInstance = new ActiveObjectService();

export const fabricService = () => fabricServiceInstance;
export const activeObjectService = () => activeObjectServiceInstance;
export const setCanvas = (canvas: Canvas) => fabricService().setCanvas(canvas);
export const workspace = () => fabricService().getWorkspace();
export const canvas = () => fabricService().getCanvas();
export const activeObject = () => activeObjectService().getActiveObject();
export const activeObjects = () => activeObjectService().getActiveObjects();
export const activeObjectAsActiveSelection = () => activeObjectService().getActiveObjectAsSelection();
export const activeObjectAsGroup = () => activeObject() as Group;
export const activeObjectAsImage = () => activeObject() as Image;
export const hasActiveObject = () => activeObjectService().hasActiveObject();
export const save = () => fabricService().save();
export const insert = (object: Object) => fabricService().insert(object);
export const remove = (objects: Object[]) => fabricService().remove(objects);
export const backgroundImage = () => fabricService().getObjectFromName('backgroundImage')! as Image;
export const hasBackgroundImage = () => !!backgroundImage();
export const activeObjectChange = () => activeObjectService().activeObjectChange();
export const deactivateObjectChange = () => activeObjectService().deactivateObjectChange();
export const onCanvasLoad = () => fabricService().onCanvasLoad;
export const isWorkspace = (object: Object) => object.get('data')?.id === 'workspace';
export const isActiveObjectImage = () => activeObjectService().isActiveObjectImage();
export const isActiveObjectSvg = () => activeObjectService().isActiveObjectSvg();
export const isActiveObjectBackgroundImage = () => activeObjectService().isActiveObjectBackgroundImage();
export const isActiveObjectText = () => activeObjectService().isActiveObjectText();
export const isActiveObjectGroupable = () => activeObjectService().isActiveObjectsGroupable();
export const isActiveObjectSelection = () => activeObjectService().isActiveObjectSelection();
export const isActiveObjectGroup = () => activeObjectService().isActiveObjectGroup();
export const isActiveObjectRemoveable = () => activeObjectService().isActiveObjectRemoveable();
export const isActiveObjectRect = () => activeObjectService().isActiveObjectRect();
export const getAll = (omit: string[] = []) => fabricService().getAll(omit) as Object[];
export const getAllImages = () => getAll().filter((object) => object.type === 'image') as Image[];
export const centerObject = (object: Object) => fabricService().centerObject(object);
export const cloneObject = (object: Object) => fabricService().cloneObject(object);
export const hiddenControlsXYVisibility = (object: Object) => fabricService().hiddenControlsXYVisibility(object);
export const showControlsXYVisibility = (object: Object) => fabricService().showControlsXYVisibility(object);
export const fire = (name: keyof CanvasEvents, data?: { target: Object }) => fabricService().fire(name, data);
export const getObjectFromId = (id: string) => fabricService().getObjectFromId(id);
export const getObjectFromName = (name: string) => fabricService().getObjectFromName(name);
export const getObjectsFromName = (name: string) => fabricService().getObjectsFromName(name);
export const getObjectsFromType = (type: string) => fabricService().getObjectsFromType(type);
export const createSvgFromURL = (url: string, options?: ImageProps) => fabricService().createSvgFromURL(url, options);
export const createImageFromURL = (url: string, options?: ImageProps) =>
  fabricService().createImageFromURL(url, options);
